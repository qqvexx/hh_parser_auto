import requests
from datetime import datetime
import pytz
import time
from bs4 import BeautifulSoup
import telebot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

moscow_tz = pytz.timezone('Europe/Moscow')

# ------------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -------------------------
include_keywords = []
exclude_keywords = [
    "Junior", "—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞", "—Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "–≥–∏–±—Ä–∏–¥–Ω—ã–π", "–æ—Ñ–∏—Å–Ω—ã–π",
    "–≤—ã—Å—à–µ–µ", "–ö—Ä—É—Ç–µ–π—à–∏–π –≤–∞–π–±+", "gamedev", "–≥–µ–π–º–¥–µ–≤", "–∏–≥—Ä—ã", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ",
    "–Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–æ—Ñ–∏—Å", "—Å—Ç–∞–∂—ë—Ä", "–Ω–µ it", "–æ—Ñ—Ñ–ª–∞–π–Ω", "office",
    "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", "1–°", "1C"
]

search_text = "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û"

excluded_title_keywords = [
    "–°—Ç–∞–∂–µ—Ä", "–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ", "Auto", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ–µ", "Junior",
    "—Å—Ç–∞–∂—ë—Ä", "—Ç–µ—Ö–Ω–∏–∫–∏", "–Ω–µ it", "–≤ –æ—Ñ–∏—Å–µ", "–Ω–µ –∞–π—Ç–∏", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π",
    "office", "mobile", "–∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "AQA", "–º–æ–±–∏–ª—å–Ω–æ–µ", "–Ø–Ω–¥–µ–∫—Å", "1C", "1–°", "–º–æ–±–∏–ª—å–Ω—ã—Ö"
]

search_params = {
    "area": 1  # –ü–æ–∏—Å–∫ –≤ –ú–æ—Å–∫–≤–µ
}

max_vacancies = 50

TOKEN = "7529463228:AAGgqXhXYEfcEA8B-8Dffs7H3nZdvAk1i5g"
bot = telebot.TeleBot(TOKEN)

reminder_sent = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

# ------------------------- –§—É–Ω–∫—Ü–∏–∏ -------------------------

def is_user_online():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Telegram."""
    chat_id = "493952412"  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id
    url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={chat_id}&user_id={chat_id}"
    try:
        response = requests.get(url).json()
        status = response.get("result", {}).get("status", "")
        return status in ["online", "recently"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def parse_vacancies():
    logging.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π...")
    url = "https://api.hh.ru/vacancies"
    headers = {
        "HH-User-Agent": "Mozilla/5.0 (qqqvexx@vk.com)"
    }
    vacancies_found = []
    page = 0

    while len(vacancies_found) < max_vacancies:
        params = {
            "text": search_text,
            "page": page,
            "per_page": 20
        }
        params.update(search_params)
        try:
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break

        data = response.json()
        items = data.get("items", [])
        if not items:
            break

        for item in items:
            if len(vacancies_found) >= max_vacancies:
                break

            vacancy_id = item.get("id")
            vacancy_detail_url = f"https://api.hh.ru/vacancies/{vacancy_id}"
            try:
                detail_response = requests.get(vacancy_detail_url, headers=headers)
                detail_response.raise_for_status()
            except requests.exceptions.RequestException as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: {e}")
                continue

            vacancy_data = detail_response.json()
            title = vacancy_data.get("name", "")
            if any(ex_kw.lower() in title.lower() for ex_kw in excluded_title_keywords):
                continue

            description_html = vacancy_data.get("description", "")
            soup = BeautifulSoup(description_html, "html.parser")
            description_text = soup.get_text(separator="\n")
            description_lower = description_text.lower()

            if not all(kw.lower() in description_lower for kw in include_keywords):
                continue
            if any(kw.lower() in description_lower for kw in exclude_keywords):
                continue

            salary_data = vacancy_data.get("salary")
            if salary_data:
                salary_from = salary_data.get("from") or 0
                salary_to = salary_data.get("to")
                currency = salary_data.get("currency")
                salary = f"{salary_from if salary_from else ''} - {salary_to if salary_to else ''} {currency}".strip(" -")
            else:
                salary = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            vacancy_info = {
                "id": vacancy_id,
                "name": vacancy_data.get("name", ""),
                "url": vacancy_data.get("alternate_url", ""),
                "salary": salary,
                "description": description_text
            }
            vacancies_found.append(vacancy_info)

        total_pages = data.get("pages", 0)
        if page >= total_pages - 1:
            break
        page += 1

    logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ {len(vacancies_found)} –≤–∞–∫–∞–Ω—Å–∏–π.")
    return vacancies_found

def send_vacancies_to_telegram(vacancies):
    global reminder_sent
    chat_id = "493952412"  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id
    current_time = datetime.now(pytz.UTC).astimezone(moscow_tz)
    current_hour = current_time.hour

    for vac in vacancies:
        vacancy_message = (
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vac['url']}\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vac['salary']}\n"
            f"–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ: {'–Ω—É–∂–Ω–æ' if any(kw in vac['description'].lower() for kw in ['—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ', '–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ', '–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–∏—Å—å–º–æ']) else '–Ω–µ –Ω—É–∂–Ω–æ'}"
        )
        try:
            bot.send_message(chat_id, vacancy_message, disable_notification=(8 <= current_hour < 19))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vac['id']}: {e}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω –∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É 12 –∏ 19, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ–¥–∏–Ω —Ä–∞–∑)
    if (12 <= current_hour < 19) and not reminder_sent and is_user_online():
        try:
            bot.send_message(chat_id, "–¢—ã –ø–æ—è–≤–∏–ª—Å—è –æ–Ω–ª–∞–π–Ω! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ üòâ")
            reminder_sent = True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def reset_reminder():
    global reminder_sent
    current_time = datetime.now(pytz.UTC).astimezone(moscow_tz)
    if current_time.hour == 19:
        reminder_sent = False

# ------------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª -------------------------
if __name__ == "__main__":
    send_times = [1, 8, 15, 22]  # –ß–∞—Å—ã –∑–∞–ø—É—Å–∫–∞ (–ø–æ –ú–°–ö)
    while True:
        current_time = datetime.now(pytz.UTC).astimezone(moscow_tz)
        if current_time.hour in send_times and current_time.minute == 0:
            logging.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π ({current_time.hour}:00). –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏...")
            vacancies = parse_vacancies()
            if vacancies:
                send_vacancies_to_telegram(vacancies[:30])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 30 –≤–∞–∫–∞–Ω—Å–∏–π
        reset_reminder()
        time.sleep(60)