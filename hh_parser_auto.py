import requests
from datetime import datetime
import pytz
import time
from bs4 import BeautifulSoup
import telebot

moscow_tz = pytz.timezone('Europe/Moscow')
# ------------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -------------------------
# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
include_keywords = []
exclude_keywords = ["Junior", "—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞", "—Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "–≥–∏–±—Ä–∏–¥–Ω—ã–π", "–æ—Ñ–∏—Å–Ω—ã–π", 
                    "–≤—ã—Å—à–µ–µ", "–ö—Ä—É—Ç–µ–π—à–∏–π –≤–∞–π–±+", "gamedev", "–≥–µ–π–º–¥–µ–≤", "–∏–≥—Ä—ã", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", 
                    "–Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–æ—Ñ–∏—Å", "—Å—Ç–∞–∂—ë—Ä", "–Ω–µ it", "–æ—Ñ—Ñ–ª–∞–π–Ω", "office", 
                    "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", "1–°", "1C"]

# –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
search_text = "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û"

# –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
excluded_title_keywords = ["–°—Ç–∞–∂–µ—Ä", "–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ", "Auto", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ–µ", "Junior", 
                            "—Å—Ç–∞–∂—ë—Ä", "—Ç–µ—Ö–Ω–∏–∫–∏", "–Ω–µ it", "–≤ –æ—Ñ–∏—Å–µ", "–Ω–µ –∞–π—Ç–∏", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π", 
                            "office", "mobile", "–∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "AQA", "–º–æ–±–∏–ª—å–Ω–æ–µ", "–Ø–Ω–¥–µ–∫—Å", "1C", "1–°", "–º–æ–±–∏–ª—å–Ω—ã—Ö"]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
search_params = {
    "area": 1  # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ú–æ—Å–∫–≤–µ
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
max_vacancies = 50

# –¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞
TOKEN = "7529463228:AAGgqXhXYEfcEA8B-8Dffs7H3nZdvAk1i5g"
bot = telebot.TeleBot(TOKEN)

# ------------------------- –õ–æ–≥–∏–∫–∞ -------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Telegram
def is_user_online():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={CHAT_ID}&user_id={CHAT_ID}"
    response = requests.get(url).json()
    status = response.get("result", {}).get("status", "")
    return status in ["online", "recently"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π
def parse_vacancies():
    url = "https://api.hh.ru/vacancies"
    headers = {
        "HH-User-Agent": "Mozilla/5.0 (qqqvexx@vk.com)"
    }

    vacancies_found = []
    page = 0

    while len(vacancies_found) < max_vacancies:
        params = {
            "text": search_text,
            "page": page,
            "per_page": 20
        }
        params.update(search_params)
        response = requests.get(url, headers=headers, params=params)

        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            break

        data = response.json()
        items = data.get("items", [])
        if not items:
            break

        for item in items:
            if len(vacancies_found) >= max_vacancies:
                break

            vacancy_id = item.get("id")
            vacancy_detail_url = f"https://api.hh.ru/vacancies/{vacancy_id}"
            detail_response = requests.get(vacancy_detail_url, headers=headers)
            if detail_response.status_code != 200:
                continue

            vacancy_data = detail_response.json()
            title = vacancy_data.get("name", "")
            if any(excluded.lower() in title.lower() for excluded in excluded_title_keywords):
                continue

            description_html = vacancy_data.get("description", "")
            soup = BeautifulSoup(description_html, "html.parser")
            description_text = soup.get_text(separator="\n")
            description_lower = description_text.lower()

            if not all(kw.lower() in description_lower for kw in include_keywords):
                continue
            if any(kw.lower() in description_lower for kw in exclude_keywords):
                continue

            salary_data = vacancy_data.get("salary")
            if salary_data:
                salary_from = salary_data.get("from") or 0
                salary_to = salary_data.get("to")
                currency = salary_data.get("currency")
                salary = f"{salary_from if salary_from else ''} - {salary_to if salary_to else ''} {currency}".strip(" -")
            else:
                salary = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            vacancy_info = {
                "id": vacancy_id,
                "name": vacancy_data.get("name", ""),
                "url": vacancy_data.get("alternate_url", ""),
                "salary": salary,
                "description": description_text
            }
            vacancies_found.append(vacancy_info)

        total_pages = data.get("pages", 0)
        if page >= total_pages - 1:
            break
        page += 1

    vacancies_found.sort(key=lambda x: x.get("salary_from", -1), reverse=True)

    return vacancies_found

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤ Telegram
def send_vacancies_to_telegram(vacancies):
    global reminder_sent
    chat_id = "493952412"  # –£–∫–∞–∂–∏ —Å–≤–æ–π chat_id
    current_hour = datetime.now(moscow_tz).hour

    for vac in vacancies:
        vacancy_message = (
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vac['url']}\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vac['salary']}\n"
            f"–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ: {'–Ω—É–∂–Ω–æ' if any(kw in vac['description'].lower() for kw in ['—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ', '–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ', '–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–∏—Å—å–º–æ']) else '–Ω–µ –Ω—É–∂–Ω–æ'}"
        )
        bot.send_message(chat_id, vacancy_message, disable_notification=(8 <= current_hour < 19))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω –¥–æ 19:00 ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (1 —Ä–∞–∑)
    if (12 <= current_hour < 19) and not reminder_sent and is_user_online():
        bot.send_message(chat_id, "–¢—ã –ø–æ—è–≤–∏–ª—Å—è –æ–Ω–ª–∞–π–Ω! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ üòâ")
        reminder_sent = True

# –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≤ 19:00
def reset_reminder():
    global reminder_sent
    if datetime.now(moscow_tz).hour == 19:
        reminder_sent = False

# ------------------------- –í—Ä–µ–º—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ -------------------------

# –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
send_times = [1, 8, 15, 22]  # 8:00, 15:00, 22:00

if __name__ == "__main__":
    while True:
        current_time = datetime.now(moscow_tz)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if current_time.hour in send_times and current_time.minute == 0:
            print(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π ({current_time.hour}:00). –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏...")
            vacancies = parse_vacancies()
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
            if vacancies:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã
                send_vacancies_to_telegram(vacancies[:30])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 30 –≤–∞–∫–∞–Ω—Å–∏–π

        reset_reminder()
        time.sleep(60)  # –ü–∞—É–∑–∞ –Ω–∞ 1 –º–∏–Ω—É—Ç—É
